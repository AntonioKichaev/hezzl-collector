// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	campaign "github.com/antoniokichaev/hezzl-collector/internal/entity/campaign"

	mock "github.com/stretchr/testify/mock"
)

// Campaign is an autogenerated mock type for the Campaign type
type Campaign struct {
	mock.Mock
}

// CreateCampaign provides a mock function with given fields: ctx, name
func (_m *Campaign) CreateCampaign(ctx context.Context, name string) (campaign.Campaign, error) {
	ret := _m.Called(ctx, name)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (campaign.Campaign, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) campaign.Campaign); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaign provides a mock function with given fields: ctx, id
func (_m *Campaign) DeleteCampaign(ctx context.Context, id int) (campaign.Campaign, error) {
	ret := _m.Called(ctx, id)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (campaign.Campaign, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) campaign.Campaign); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaign provides a mock function with given fields: ctx, id
func (_m *Campaign) GetCampaign(ctx context.Context, id int) (campaign.Campaign, error) {
	ret := _m.Called(ctx, id)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (campaign.Campaign, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) campaign.Campaign); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaigns provides a mock function with given fields: ctx
func (_m *Campaign) GetCampaigns(ctx context.Context) ([]campaign.Campaign, error) {
	ret := _m.Called(ctx)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]campaign.Campaign, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []campaign.Campaign); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: ctx, name, id
func (_m *Campaign) UpdateCampaign(ctx context.Context, name string, id int) (campaign.Campaign, error) {
	ret := _m.Called(ctx, name, id)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (campaign.Campaign, error)); ok {
		return rf(ctx, name, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) campaign.Campaign); ok {
		r0 = rf(ctx, name, id)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, name, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCampaign creates a new instance of Campaign. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCampaign(t interface {
	mock.TestingT
	Cleanup(func())
}) *Campaign {
	mock := &Campaign{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

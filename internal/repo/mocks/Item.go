// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	items "github.com/antoniokichaev/hezzl-collector/internal/entity/items"
	mock "github.com/stretchr/testify/mock"
)

// Item is an autogenerated mock type for the Item type
type Item struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: ctx, name, campaignId
func (_m *Item) CreateItem(ctx context.Context, name string, campaignId int) (items.Item, error) {
	ret := _m.Called(ctx, name, campaignId)

	var r0 items.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (items.Item, error)); ok {
		return rf(ctx, name, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) items.Item); ok {
		r0 = rf(ctx, name, campaignId)
	} else {
		r0 = ret.Get(0).(items.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, name, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, id, campaignId
func (_m *Item) DeleteItem(ctx context.Context, id int, campaignId int) (items.Item, error) {
	ret := _m.Called(ctx, id, campaignId)

	var r0 items.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (items.Item, error)); ok {
		return rf(ctx, id, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) items.Item); ok {
		r0 = rf(ctx, id, campaignId)
	} else {
		r0 = ret.Get(0).(items.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, id, campaignId
func (_m *Item) GetItem(ctx context.Context, id int, campaignId int) (items.Item, error) {
	ret := _m.Called(ctx, id, campaignId)

	var r0 items.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (items.Item, error)); ok {
		return rf(ctx, id, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) items.Item); ok {
		r0 = rf(ctx, id, campaignId)
	} else {
		r0 = ret.Get(0).(items.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields: ctx
func (_m *Item) GetItems(ctx context.Context) ([]items.Item, error) {
	ret := _m.Called(ctx)

	var r0 []items.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]items.Item, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []items.Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]items.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, name, description, id, campaignId
func (_m *Item) UpdateItem(ctx context.Context, name string, description string, id int, campaignId int) (items.Item, error) {
	ret := _m.Called(ctx, name, description, id, campaignId)

	var r0 items.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) (items.Item, error)); ok {
		return rf(ctx, name, description, id, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) items.Item); ok {
		r0 = rf(ctx, name, description, id, campaignId)
	} else {
		r0 = ret.Get(0).(items.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, name, description, id, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewItem creates a new instance of Item. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *Item {
	mock := &Item{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
